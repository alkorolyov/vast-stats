#!/usr/bin/python

import os
import pwd
import errno
import subprocess
from subprocess import PIPE, CalledProcessError
import sys
import inspect
import datetime as dt
import logging

INSTALL_DIR = "/var/lib/vast-stats"
DAEMON_GROUP = 'vast-stats'
DAEMON_USER = 'vast'
GIT_RAW_URL = "https://raw.githubusercontent.com/alkorolyov/vast-stats/master"


logging.basicConfig(
    # filename="vast_stats_install.log",
    format='[%(asctime)s] [%(levelname)s] %(message)s',
    level=logging.INFO
)

maybe_sudo = ["sudo"] if os.geteuid() != 0 else []
run_as = ["sudo", "-u", DAEMON_USER]


def log_green(msg: str):
    logging.info(green(msg))


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def green(s: str) -> str:
    return f"{bcolors.OKGREEN}{s}{bcolors.ENDC}"


def set_locale():
    for x in ["LANG", "LC_ADDRESS", "LC_COLLATE", "LC_CTYPE",
              "LC_IDENTIFICATION", "LC_MONETARY", "LC_MEASUREMENT",
              "LC_NAME", "LC_NUMERIC", "LC_PAPER", "LC_TELEPHONE",
              "LC_TIME", "LC_ALL", "LANGUAGE"]:
        os.environ[x] = "C.UTF-8"
    os.environ["LC_MESSAGES"] = "C"


def format_process_args(*a, **kw):
    res = []
    for x in a:
        res.append(repr(x))
    for k, v in kw.items():
        # skip default args
        if k == 'env':
            continue
        # if k in ["stdout", "stderr"] and v is PIPE:
        #     continue
        if k in ["text", "check", "capture_output"] and v is True:
            continue

        res.append(f"{k}={repr(v)}")
    return ", ".join(res)


def process_run(*a, **kw):
    kw.setdefault("capture_output", True)
    # kw.setdefault("stdout", PIPE)
    # kw.setdefault("stderr", PIPE)
    kw.setdefault("text", True)
    kw.setdefault('check', True)
    # optional = kw.pop("optional", False)
    kw["env"] = os.environ
    try:
        logging.info(f"subprocess.run({format_process_args(*a, **kw)})")
        res = subprocess.run(*a, **kw)
        logging.info(res.stdout)
        return res.returncode
    except CalledProcessError as e:
        logging.warning(e.stderr)
        return e.returncode
    except FileNotFoundError or FileExistsError as e:
        logging.warning(e)
        return e.errno
    except OSError as e:
        logging.error(e)
        raise


def mkdir(path):
    try:
        os.makedirs(path, exist_ok=True)
    except OSError as e:
        logging.error(e)
        raise


def create_daemon_user():
    process_run(["groupadd", DAEMON_GROUP])
    process_run(["adduser",
                    "--system",
                    "--gecos", "",
                    "--home", INSTALL_DIR,
                    # "--no-create-home",
                    "--disabled-password",
                    "--ingroup", DAEMON_GROUP,
                    "--shell", "/bin/bash",
                    DAEMON_USER])
    process_run(["chown", f"{DAEMON_USER}:{DAEMON_GROUP}", INSTALL_DIR, "-R"])


def change_user(name: str):
    try:
        user = pwd.getpwnam(name)
        os.environ['HOME'   ] = user.pw_dir
        os.environ['LOGNAME'] = name
        os.environ['PWD'    ] = os.getcwd()
        os.environ['USER'   ] = name
        os.setgid(user.pw_gid)
        os.setuid(user.pw_uid)
    except Exception as e:
        logging.error(e)
        raise


def install_pip_requirements():
    process_run(run_as + ["curl", "-sSL", f"{GIT_RAW_URL}/requirements.txt", "-o", "requirements.txt"])
    process_run(run_as + ["pip", "install", "-r", "requirements.txt"])


def download_sources():
    process_run(run_as + ["curl", "-sSL", f"{GIT_RAW_URL}/main", "-o", "main"])
    mkdir('src')
    process_run(run_as + ["curl", "-sSL", f"{GIT_RAW_URL}/src/tables.py", "-o", "src/tables.py"])
    process_run(run_as + ["curl", "-sSL", f"{GIT_RAW_URL}/src/preprocess.py", "-o", "src/preprocess.py"])
    process_run(run_as + ["curl", "-sSL", f"{GIT_RAW_URL}/src/utils.py", "-o", "src/utils.py"])
    mkdir('service')
    process_run(run_as + ["curl", "-sSL", f"{GIT_RAW_URL}/service/vast.service", "-o", "service/vast.service"])
    process_run(run_as + ["curl", "-sSL", f"{GIT_RAW_URL}/service/start.service", "-o", "service/start.sh"])






def setup_service():
    process_run(["chmod", "+x", "service/start.sh"])
    process_run(["cp", "service/vast.service", "/etc/systemd/system/vast.service"])
    process_run(["systemctl", "daemon-reload"])
    process_run(["systemctl", "enable", "vast.service"])
    process_run(["systemctl", "start", "vast.service"])


    pass


if __name__ == '__main__':
    log_green('Begin vast-stats software install')

    set_locale()

    # apt update and install basic packages
    process_run(['apt-get', 'update', '-y'])
    process_run(['apt-get', 'install', 'python3-pip', '-y'])

    # log_green('=> Check if pip installed')
    # if process_run(['pip', '--version']) != 0:


    # check if daemon user exists
    if process_run(['id', '-u', DAEMON_USER]) != 0:
        logging.info('Create vast-stats daemon user')
        create_daemon_user()

    # change_user(DAEMON_USER)

    os.chdir(INSTALL_DIR)

    # process_run(['whoami'])
    # logging.info(os.getcwd())
    # process_run(["sudo", "su", DAEMON_USER])

    log_green('Install pip requirements')
    install_pip_requirements()

    log_green('Download sources')
    download_sources()

    log_green('Install daemon service')
    setup_service()




